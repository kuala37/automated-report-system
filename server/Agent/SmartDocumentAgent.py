import json
from typing import Dict, Any, Optional
from sqlalchemy.ext.asyncio import AsyncSession
from models.models import Report
from generation.generate_text_langchain import generate_text_with_params
from services.document_editor_service import DocumentEditorService
import re


class SmartDocumentAgent:
    """–£–º–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ LLM –≤—ã–∑–æ–≤—ã"""
    
    def __init__(self):
        self.editor_service = DocumentEditorService()
    
    async def process_command(
        self, 
        db: AsyncSession, 
        report_id: int, 
        user_id: int, 
        command_text: str
    ) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ LLM"""
        
        print(f"ü§ñ SmartAgent –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É: '{command_text}'")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            report = await db.get(Report, report_id)
            if not report or report.user_id != user_id:
                return {"success": False, "message": "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document_text = await self._get_document_text(report)
            print(f"üìÑ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞: {len(document_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –≠—Ç–∞–ø 1: –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ LLM
            analysis_result = await self._analyze_command_with_llm(command_text, document_text)
            print(f"üß† –ê–Ω–∞–ª–∏–∑ LLM: {analysis_result}")
            
            if not analysis_result["success"]:
                return analysis_result
            
            # –≠—Ç–∞–ø 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            action_result = await self._execute_action(
                db, report_id, analysis_result["action"], user_id
            )
            print(f"‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {action_result}")
            
            return action_result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ SmartAgent: {str(e)}")
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"}
    
    async def _analyze_command_with_llm(self, command_text: str, document_text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ LLM –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ"""
        selected_text = None
        selected_paragraph_id = None
        clean_command = command_text

        match = re.search(r'\[–í–´–î–ï–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢: "([^"]*(?:"[^"]*"[^"]*)*)"(?:\s+–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ (\d+))?\]\s*(.*)', command_text, re.DOTALL)
        # match = re.search(r'\[–í–´–î–ï–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢: "([^"]+)"(?:\s+–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ (\d+))?\]\s*(.*)', command_text)
        
        if match:
            selected_text = match.group(1)
            selected_paragraph_id = match.group(2)
            clean_command = match.group(3)
            print(f"üéØ –ù–∞–π–¥–µ–Ω –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{selected_text}', –∫–æ–º–∞–Ω–¥–∞: '{clean_command}'")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        doc_preview = document_text[:1500] if len(document_text) > 1500 else document_text
        
        analysis_prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞.

–ö–û–ú–ê–ù–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{clean_command}"

{f'–í–´–î–ï–õ–ï–ù–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú –¢–ï–ö–°–¢: "{selected_text}"' if selected_text else '–í–´–î–ï–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
{f'–ü–ê–†–ê–ì–†–ê–§: {selected_paragraph_id}' if selected_paragraph_id else '–ü–ê–†–ê–ì–†–ê–§: –Ω–µ —É–∫–∞–∑–∞–Ω'}

–¢–ï–ö–°–¢ –î–û–ö–£–ú–ï–ù–¢–ê:
{doc_preview}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ –¥–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
-–ï–°–õ–ò –ï–°–¢–¨ –í–´–î–ï–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢ - –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¢–û–ß–ù–û –ö–ê–ö –ï–°–¢–¨ –≤ –ø–æ–ª–µ "target"! 
-–ù–ï –ò–ó–ú–ï–ù–Ø–ô, –ù–ï –î–û–ü–û–õ–ù–Ø–ô –∏ –ù–ï –°–û–ö–†–ê–©–ê–ô –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç!
-target –¥–æ–ª–∂–µ–Ω –ü–û–õ–ù–û–°–¢–¨–Æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É!

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:

1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç "–ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç" –ë–ï–ó —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –æ–Ω –∏–º–µ–µ—Ç –≤ –≤–∏–¥—É –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü
2. –ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç "–ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü" - –Ω–∞–π–¥–∏ –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
3. –ï—Å–ª–∏ –ø—Ä–æ—Å–∏—Ç —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –∂–∏—Ä–Ω—ã–º/–∫—É—Ä—Å–∏–≤–æ–º - —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
4. –ï—Å–ª–∏ –ø—Ä–æ—Å–∏—Ç –∑–∞–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ - —ç—Ç–æ –∑–∞–º–µ–Ω–∞
5. –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ "—É–¥–∞–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ" –∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å paragraph_id, –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç ID
6. –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "–ø–µ—Ä–≤—ã–π", "–≤—Ç–æ—Ä–æ–π" –∏ —Ç.–¥., –∏–∑–≤–ª–µ–∫–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –≤–≤–∏–¥–µ –æ–±—ã—á–Ω–æ–π —Ü–∏—Ñ—Ä—ã (1,2,3 –∏ —Ç.–¥.) –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –∫–∞–∫ paragraph_id
7. –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ "—É–¥–∞–ª–∏ —ç—Ç–æ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ" –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞, –Ω–æ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–π paragraph_id –∏–∑ –≤—ã–¥–µ–ª–µ–Ω–∏—è
8. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Å–∏—Ç –ö–û–ù–ö–†–ï–¢–ù–û —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ,—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Å–ø–æ–ª—å–∑—É–π "—É–¥–∞–ª–∏ —Ç–µ–∫—Å—Ç" —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
9. –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ—è—Å–Ω–∞, –≤–µ—Ä–Ω–∏ "clarify" —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å

–í–û–ó–ú–û–ñ–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:
- rewrite_all: –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç
- rewrite_paragraph: –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–±–∑–∞—Ü (–Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫–æ–π)
- replace_text: –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –¥—Ä—É–≥–æ–π
- remove_formatting: —Å–Ω—è—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- remove_all_formatting: —Å–Ω—è—Ç–∏–µ –≤—Å–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- format_text: —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º/–∫—É—Ä—Å–∏–≤–æ–º/–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–º
- add_text: –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
- add_paragraph: –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
- delete_text: —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç
- delete_paragraph: —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ
- format_all_text: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–°–ï–ì–û –¥–æ–∫—É–º–µ–Ω—Ç–∞
- format_all_headings: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤


–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "action": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–¥–µ–π—Å—Ç–≤–∏—è",
    "target": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
    "replacement": "–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞)",
    "style": "bold/italic/underline (–µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)",
    "explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å"
}}

–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ—è—Å–Ω–∞, –≤–µ—Ä–Ω–∏:
{{
    "action": "clarify",
    "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å"
}}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""
        
        try:
            response = generate_text_with_params(
                analysis_prompt, 
                temperature=0.1, 
                max_tokens=400
            )
            
            print(f"üîç –û—Ç–≤–µ—Ç LLM –Ω–∞ –∞–Ω–∞–ª–∏–∑: {response}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            response_clean = response.strip()
            if response_clean.startswith('```json'):
                response_clean = response_clean[7:-3]
            elif response_clean.startswith('```'):
                response_clean = response_clean[3:-3]
            
            try:
                analysis = json.loads(response_clean)
                
                # –í–ê–ñ–ù–û: –ï—Å–ª–∏ target –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–æ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                # if not analysis.get("target") and selected_text:
                #     analysis["target"] = 
                print("–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", selected_text)
                if selected_text:
                    print(f"üîí –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω—è–µ–º target '{analysis.get('target', '–ù–ï–¢')}' –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{selected_text}'")
                    analysis["target"] = selected_text
                    
                # –î–æ–±–∞–≤–ª—è–µ–º paragraph_id –µ—Å–ª–∏ –µ—Å—Ç—å
                if selected_paragraph_id and not analysis.get("paragraph_id"):
                    analysis["paragraph_id"] = int(selected_paragraph_id)
                else:
                    print(f"‚ö†Ô∏è –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º target –æ—Ç LLM: '{analysis.get('target', '–ù–ï–¢')}'")
            
                return {"success": True, "action": analysis}
                
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ JSON –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç–µ
                json_match = re.search(r'\{[^{}]*\}', response, re.DOTALL)
                if json_match:
                    analysis = json.loads(json_match.group(0))
                    if not analysis.get("target") and selected_text:
                        analysis["target"] = selected_text
                    if selected_paragraph_id and not analysis.get("paragraph_id"):
                        analysis["paragraph_id"] = int(selected_paragraph_id)
                    return {"success": True, "action": analysis}
                else:
                    return {"success": False, "message": "LLM –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É"}
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ—Ä–µ–∑ LLM: {str(e)}")
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"}


    async def _execute_action(
        self, 
        db: AsyncSession, 
        report_id: int, 
        action_data: Dict[str, Any], 
        user_id: int
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ LLM"""
        
        action_type = action_data.get("action")
        
        if action_type == "clarify":
            return {
                "success": False, 
                "message": f"–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ: {action_data.get('explanation', '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ—è—Å–Ω–∞')}"
            }
        
        elif action_type == "rewrite_all":
            return await self._rewrite_entire_document(db, report_id, user_id)
        
        elif action_type == "rewrite_paragraph":
            target_text = action_data.get("target", "")
            return await self._rewrite_specific_text(db, report_id, target_text, user_id)
        
        elif action_type == "replace_text":
            old_text = action_data.get("target", "")
            new_text = action_data.get("replacement", "")
            return await self._replace_text_in_document(db, report_id, old_text, new_text, user_id)
        
        elif action_type == "format_text":
            target_text = action_data.get("target", "")
            style = action_data.get("style", "bold")
            return await self._format_text_in_document(db, report_id, target_text, style, user_id)

        elif action_type == "format_all_text":
            style = action_data.get("style", "bold")
            return await self._format_all_text_in_document(db, report_id, style, user_id)
        
        elif action_type == "format_all_headings":
            style = action_data.get("style", "bold")
            return await self._format_all_headings_in_document(db, report_id, style, user_id)

        elif action_type == "add_text":
            new_text = action_data.get("replacement", "")
            return await self._add_text_to_document(db, report_id, new_text, user_id)
        
        elif action_type == "delete_text":
            target_text = action_data.get("target", "")
            return await self._delete_text_from_document(db, report_id, target_text, user_id)
        
        elif action_type == "delete_paragraph":
            paragraph_id = action_data.get("paragraph_id")
            if not paragraph_id:
                # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω ID –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞, –Ω–æ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –Ω–∞–π—Ç–∏
                paragraph_id = action_data.get("target", "")

            if paragraph_id is None:
                return {"success": False, "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —É–¥–∞–ª–∏—Ç—å. –í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –Ω—É–∂–Ω–æ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ."}
            return await self._delete_paragraph_from_document(db, report_id, paragraph_id, user_id)
        

        elif action_type == "remove_formatting":
            paragraph_id = action_data.get("paragraph_id")
            target_text = action_data.get("target", "")
            style = action_data.get("style", "bold")
            return await self._remove_formatting_from_text(db, report_id, target_text, style,paragraph_id, user_id)
        
        elif action_type == "remove_all_formatting":
            target_text = action_data.get("target", "")
            return await self._remove_all_formatting_from_text(db, report_id, target_text, user_id)
        
    async def _rewrite_entire_document(self, db: AsyncSession, report_id: int, user_id: int) -> Dict[str, Any]:
        """–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
        report = await db.get(Report, report_id)
        document_text = await self._get_document_text(report)
        
        if len(document_text) < 50:
            return {"success": False, "message": "–î–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è"}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —á–µ—Ä–µ–∑ LLM
        rewrite_prompt = f"""
–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ —Å–º—ã—Å–ª, –Ω–æ —É–ª—É—á—à–∏–≤ —Å—Ç–∏–ª—å, —è—Å–Ω–æ—Å—Ç—å –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å:

{document_text}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
- –£–ª—É—á—à–∏ —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è
- –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —è—Å–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
- –ò—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
- –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏ –∏ —Ñ–∞–∫—Ç—ã

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
"""
        
        try:
            new_text = generate_text_with_params(
                rewrite_prompt,
                temperature=0.7,
                max_tokens=2000
            )
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç
            edit_command = {
                "command": "replace_all_content",
                "newText": new_text,
                "user_id": user_id
            }
            
            result = await self.editor_service.update_document_with_edit(db, report_id, edit_command)
            return result
            
        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"}
    
    async def _rewrite_specific_text(self, db: AsyncSession, report_id: int, target_text: str, user_id: int) -> Dict[str, Any]:
        """–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        
        if not target_text or len(target_text) < 10:
            # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü
            report = await db.get(Report, report_id)
            document_text = await self._get_document_text(report)
            paragraphs = document_text.split('\n\n')
            target_text = paragraphs[0] if paragraphs else document_text[:200]
        
        rewrite_prompt = f"""
–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –µ–≥–æ —Å–º—ã—Å–ª, –Ω–æ —É–ª—É—á—à–∏–≤ —Å—Ç–∏–ª—å –∏ —è—Å–Ω–æ—Å—Ç—å:

"{target_text}"

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
"""
        
        try:
            new_text = generate_text_with_params(
                rewrite_prompt,
                temperature=0.7,
                max_tokens=500
            )
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            edit_command = {
                "command": "replace_text",
                "oldText": target_text,
                "newText": new_text.strip(),
                "user_id": user_id
            }
            
            result = await self.editor_service.update_document_with_edit(db, report_id, edit_command)
            return result
            
        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"}
    
    async def _replace_text_in_document(self, db: AsyncSession, report_id: int, old_text: str, new_text: str, user_id: int) -> Dict[str, Any]:
        """–ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        
        edit_command = {
            "command": "replace_text",
            "oldText": old_text,
            "newText": new_text,
            "user_id": user_id
        }
        
        return await self.editor_service.update_document_with_edit(db, report_id, edit_command)
    
    async def _format_text_in_document(self, db: AsyncSession, report_id: int, target_text: str, style: str, user_id: int) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        
        edit_command = {
            "command": "format_text",
            "text": target_text,
            "style": style,
            "user_id": user_id
        }
        
        return await self.editor_service.update_document_with_edit(db, report_id, edit_command)

    async def _format_all_text_in_document(self, db: AsyncSession, report_id: int, style: str, user_id: int) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        
        edit_command = {
            "command": "format_all_text",
            "style": style,
            "user_id": user_id
        }
        
        return await self.editor_service.update_document_with_edit(db, report_id, edit_command)
    
    async def _format_all_headings_in_document(self, db: AsyncSession, report_id: int, style: str, user_id: int) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        
        edit_command = {
            "command": "format_all_headings",
            "style": style,
            "user_id": user_id
        }
        
        return await self.editor_service.update_document_with_edit(db, report_id, edit_command)

    async def _add_text_to_document(self, db: AsyncSession, report_id: int, new_text: str, user_id: int) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç"""
        
        edit_command = {
            "command": "add_paragraph",
            "text": new_text,
            "user_id": user_id
        }
        
        return await self.editor_service.update_document_with_edit(db, report_id, edit_command)
    
    async def _delete_text_from_document(self, db: AsyncSession, report_id: int, target_text: str, user_id: int) -> Dict[str, Any]:
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        
        edit_command = {
            "command": "replace_text",
            "oldText": target_text,
            "newText": "",
            "user_id": user_id
        }
        
        return await self.editor_service.update_document_with_edit(db, report_id, edit_command)
    
    async def _delete_paragraph_from_document(self, db: AsyncSession, report_id: int, paragraph_id: int, user_id: int) -> Dict[str, Any]:
        """–£–¥–∞–ª—è–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        
        edit_command = {
            "command": "delete_paragraph",
            "paragraphId": paragraph_id,
            "user_id": user_id
        }
        
        return await self.editor_service.update_document_with_edit(db, report_id, edit_command)
        
    async def _remove_formatting_from_text(self, db: AsyncSession, report_id: int, target_text: str, style: str, paragraph_id: int,user_id: int) -> Dict[str, Any]:
        """–°–Ω–∏–º–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–∞"""
        
        edit_command = {
            "command": "remove_formatting",
            "text": target_text,
            "style": style,
            "paragraphId": paragraph_id,
            "user_id": user_id
        }
        
        return await self.editor_service.update_document_with_edit(db, report_id, edit_command)

    async def _remove_all_formatting_from_text(self, db: AsyncSession, report_id: int, target_text: str, user_id: int) -> Dict[str, Any]:
        """–°–Ω–∏–º–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–∞"""
        
        edit_command = {
            "command": "remove_all_formatting",
            "text": target_text,
            "user_id": user_id
        }
        
        return await self.editor_service.update_document_with_edit(db, report_id, edit_command)



    async def _get_document_text(self, report: Report) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        
        if hasattr(report, 'html_content') and report.html_content:
            try:
                from bs4 import BeautifulSoup
                soup = BeautifulSoup(report.html_content, 'html.parser')
                text = soup.get_text()
                # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                lines = [line.strip() for line in text.split('\n') if line.strip()]
                return '\n\n'.join(lines)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ HTML: {str(e)}")
        
        # Fallback: —á–∏—Ç–∞–µ–º –∏–∑ docx —Ñ–∞–π–ª–∞
        try:
            if hasattr(report, 'file_path') and report.file_path:
                from docx import Document
                doc = Document(report.file_path)
                paragraphs = []
                for para in doc.paragraphs:
                    if para.text.strip():
                        paragraphs.append(para.text.strip())
                return '\n\n'.join(paragraphs)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è docx —Ñ–∞–π–ª–∞: {str(e)}")
        
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞"