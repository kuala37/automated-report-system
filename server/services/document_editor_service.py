import os
import json
from datetime import datetime
from docx import Document
from bs4 import BeautifulSoup
import mammoth
from models.models import Report, DocumentEdit
from sqlalchemy.ext.asyncio import AsyncSession
from docx.shared import Pt
from docx.enum.text import WD_UNDERLINE
from .docx_html_converter import WordToHtmlConverter

class DocumentEditorService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    
    async def docx_to_html(self, docx_path):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX –≤ HTML —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WordToHtmlConverter"""
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
            converter = WordToHtmlConverter()
            enhanced_html = converter.convert_with_precise_formatting(docx_path)
            
            return enhanced_html
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DOCX –≤ HTML: {str(e)}")
            # –ü—Ä–æ—Å—Ç–æ–π fallback –±–µ–∑ mammoth
            return await self._simple_fallback_conversion(docx_path)
    
    async def _simple_fallback_conversion(self, docx_path):
        """–ü—Ä–æ—Å—Ç–æ–π fallback –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        try:
            doc = Document(docx_path)
            html_parts = []
            
            html_parts.append('<!DOCTYPE html>')
            html_parts.append('<html><head><meta charset="utf-8">')
            html_parts.append('<style>')
            html_parts.append("""
                body { font-family: 'Times New Roman', serif; font-size: 12pt; padding: 20px; }
                .word-document-page { background: white; padding: 60px; margin: 0 auto; max-width: 21cm; }
                p { text-indent: 1.25cm; margin: 0; }
                h1, h2, h3, h4, h5, h6 { text-indent: 0; font-weight: bold; margin: 0; }
            """)
            html_parts.append('</style></head><body>')
            html_parts.append('<div class="word-document-page">')
            
            for i, paragraph in enumerate(doc.paragraphs):
                if paragraph.text.strip():
                    style_name = paragraph.style.name
                    if 'Heading' in style_name:
                        level = style_name.replace('Heading ', '')
                        html_parts.append(f'<h{level} data-paragraph-id="{i}">{paragraph.text}</h{level}>')
                    else:
                        html_parts.append(f'<p data-paragraph-id="{i}">{paragraph.text}</p>')
                else:
                    html_parts.append(f'<p data-paragraph-id="{i}" data-is-empty="true">&nbsp;</p>')
            
            html_parts.append('</div></body></html>')
            return '\n'.join(html_parts)
            
        except Exception as e:
            print(f"Fallback conversion error: {e}")
            return "<html><body><div class='word-document-page'><p>–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞</p></div></body></html>"
    
    async def update_document_with_edit(self, db: AsyncSession, report_id: int, edit_command: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é"""
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
        report = await db.get(Report, report_id)
        if not report:
            raise ValueError(f"–û—Ç—á–µ—Ç —Å ID {report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º version_history, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if report.version_history is None:
            initial_version = {
                "version": 1,
                "timestamp": datetime.utcnow().isoformat(),
                "description": "–ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                "file_path": report.file_path,
                "html_content": report.html_content,
                "edit_description": "–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            }
            report.version_history = [initial_version]
            await db.commit()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc = Document(report.file_path)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        command_type = edit_command.get("command")
        result = {"success": False, "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"}
        print(f"üîß –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {edit_command}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        old_text = None
        new_text = None
        paragraph_id = None
        edit_description = f"–ö–æ–º–∞–Ω–¥–∞: {command_type}"
        
        if command_type == "replace_text":
            old_text = edit_command.get("oldText")
            new_text = edit_command.get("newText")
            paragraph_id = edit_command.get("paragraphId")
            result = await self._replace_text(doc, old_text, new_text, paragraph_id)
            edit_description = f"–ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞: '{old_text[:30]}...' ‚Üí '{new_text[:30]}...'"
            
        elif command_type == "format_text":
            text = edit_command.get("text")
            style = edit_command.get("style")
            paragraph_id = edit_command.get("paragraphId")
            result = await self._format_text(doc, text, style, paragraph_id)
            old_text = text
            new_text = f"{style}({text})"
            edit_description = f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: {style}"
            
        elif command_type == "add_paragraph":
            text = edit_command.get("text")
            after_paragraph_id = edit_command.get("afterParagraphId")
            result = await self._add_paragraph(doc, text, after_paragraph_id)
            new_text = text
            edit_description = f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: '{text[:30]}...'"
            
        elif command_type == "delete_paragraph":
            paragraph_id = edit_command.get("paragraphId")
            result = await self._delete_paragraph(doc, paragraph_id)
            edit_description = f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ {paragraph_id}"
            
        elif command_type == "rewrite_text":
            old_text = edit_command.get("oldText")
            new_text = edit_command.get("newText")
            paragraph_id = edit_command.get("paragraphId")
            result = await self._replace_text(doc, old_text, new_text, paragraph_id)
            edit_description = f"–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"
            
        elif command_type == "format_all_text":
            style = edit_command.get("style")
            result = await self._format_all_text(doc, style)
            old_text = "–í–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            new_text = f"{style}(–í–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞)"
            edit_description = f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞: {style}"
            
        elif command_type == "format_all_headings":
            style = edit_command.get("style")
            result = await self._format_all_headings(doc, style)
            old_text = "–í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            new_text = f"{style}(–í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞)"
            edit_description = f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {style}"
            
        elif command_type == "replace_all_occurrences":
            old_text = edit_command.get("oldText")
            new_text = edit_command.get("newText")
            result = await self._replace_all_text(doc, old_text, new_text)
            edit_description = f"–ó–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π: '{old_text}' ‚Üí '{new_text}'"
        
        elif command_type == "remove_formatting":
            text = edit_command.get("text")
            style = edit_command.get("style")
            paragraph_id = edit_command.get("paragraphId")
            print(f"Removing formatting: {text}, style: {style}, paragraph_id: {paragraph_id}")
            result = await self._remove_formatting(doc, text, style, paragraph_id)
            old_text = f"{style}({text})"
            new_text = text
            edit_description = f"–°–Ω—è—Ç–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {style}"
        
        elif command_type == "remove_all_formatting":
            result = await self._remove_all_formatting(doc)
            old_text = "–í—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            new_text = "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç"
            edit_description = "–°–Ω—è—Ç–∏–µ –≤—Å–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        if result["success"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞)
            version_history = list(report.version_history) if report.version_history else []
            current_version_exists = any(v.get("version") == report.document_version for v in version_history)
            
            if not current_version_exists:
                current_version_data = {
                    "version": report.document_version,
                    "timestamp": datetime.utcnow().isoformat(),
                    "description": f"–í–µ—Ä—Å–∏—è {report.document_version}",
                    "file_path": report.file_path,
                    "html_content": report.html_content,
                    "edit_description": "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
                }
                version_history.append(current_version_data)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
            new_version = report.document_version + 1
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
            base_path, ext = os.path.splitext(report.file_path)
            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            if base_path.endswith(f"_v{report.document_version}"):
                base_path = base_path[:-len(f"_v{report.document_version}")]
            new_file_path = f"{base_path}_v{new_version}{ext}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            doc.save(new_file_path)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_file_path}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            html_content = await self.docx_to_html(new_file_path)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
            new_version_data = {
                "version": new_version,
                "timestamp": datetime.utcnow().isoformat(),
                "description": f"–í–µ—Ä—Å–∏—è {new_version}",
                "file_path": new_file_path,
                "html_content": html_content,
                "edit_description": edit_description
            }
            version_history.append(new_version_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            report.document_version = new_version
            report.file_path = new_file_path
            report.html_content = html_content
            report.version_history = version_history
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            edit = DocumentEdit(
                report_id=report_id,
                user_id=edit_command.get("user_id"),
                chat_message_id=edit_command.get("message_id"),
                edit_type=command_type,
                content_before=json.dumps({"text": old_text}) if old_text else None,
                content_after=json.dumps({"text": new_text}) if new_text else None,
                position=json.dumps({"paragraph_id": paragraph_id}) if paragraph_id is not None else None
            )
            db.add(edit)
            await db.commit()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ä—Å–∏—è {new_version}: {edit_description}")
        
        return result
    
    async def _replace_text(self, doc, old_text, new_text, paragraph_id=None):
        """–ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        if not old_text or not new_text:
            return {"success": False, "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"}

        async def replace_with_boundaries_callback(paragraph, start_pos, end_pos, is_partial):
            """–ó–∞–º–µ–Ω—è–µ—Ç —Ç–æ—á–Ω—É—é —á–∞—Å—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"""
            
            full_text = paragraph.text
            
            # –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            for i in range(len(paragraph.runs)):
                p = paragraph._p
                p.remove(paragraph.runs[0]._r)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∑–∞–º–µ–Ω–æ–π
            new_full_text = full_text[:start_pos] + new_text + full_text[end_pos:]
            paragraph.add_run(new_full_text)
            
            return True

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω—ã–π —Ç–µ–∫—Å—Ç
        multi_result = await self._apply_operation_to_selected_text(
            doc, old_text, replace_with_boundaries_callback, "–∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞"
        )
        
        if multi_result is not None:
            return multi_result
        
        found = False
        
        if paragraph_id is not None:
            # –ó–∞–º–µ–Ω—è–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ
            try:
                paragraph = doc.paragraphs[int(paragraph_id)]
                if old_text in paragraph.text:
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ runs –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                    text = paragraph.text.replace(old_text, new_text)
                    for i in range(len(paragraph.runs)):
                        p = paragraph._p
                        p.remove(paragraph.runs[0]._r)
                    paragraph.add_run(text)
                    found = True
            except IndexError:
                return {"success": False, "message": f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å ID {paragraph_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        else:
            # –ó–∞–º–µ–Ω—è–µ–º –≤–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
            for paragraph in doc.paragraphs:
                if old_text in paragraph.text:
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ runs –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                    text = paragraph.text.replace(old_text, new_text)
                    for i in range(len(paragraph.runs)):
                        p = paragraph._p
                        p.remove(paragraph.runs[0]._r)
                    paragraph.add_run(text)
                    found = True
        
        if found:
            return {"success": True, "message": f"–¢–µ–∫—Å—Ç '{old_text}' –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ '{new_text}'"}
        else:
            return {"success": False, "message": f"–¢–µ–∫—Å—Ç '{old_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    async def _format_text(self, doc, text, style, paragraph_id=None, start_pos=0, end_pos=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)"""
        if not text or not style:
            return {"success": False, "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∏–ª—å"}
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω—ã–π —Ç–µ–∫—Å—Ç
        # Callback –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–æ—á–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        async def format_with_boundaries_callback(paragraph, start_pos, end_pos, is_partial):
            """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—É—é —á–∞—Å—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"""
            
            full_text = paragraph.text
            
            # –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            for i in range(len(paragraph.runs)):
                p = paragraph._p
                p.remove(paragraph.runs[0]._r)
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ —á–∞—Å—Ç–∏: –¥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å, –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if start_pos > 0:
                paragraph.add_run(full_text[:start_pos])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å
            if end_pos > start_pos:
                formatted_run = paragraph.add_run(full_text[start_pos:end_pos])
                if style == 'bold':
                    formatted_run.bold = True
                elif style == 'italic':
                    formatted_run.italic = True
                elif style == 'underline':
                    formatted_run.underline = WD_UNDERLINE.SINGLE
            
            # –ß–∞—Å—Ç—å –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if end_pos < len(full_text):
                paragraph.add_run(full_text[end_pos:])
            
            return True
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω—ã–π —Ç–µ–∫—Å—Ç
        multi_result = await self._apply_operation_to_selected_text(
            doc, text, format_with_boundaries_callback, "—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        )
        
        if multi_result is not None:
            return multi_result
            
        # –ï—Å–ª–∏ –Ω–µ –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        found = False
        
        if paragraph_id is not None:
            try:
                paragraph = doc.paragraphs[int(paragraph_id)]
                if text in paragraph.text:
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
                    if start_pos == 0 and end_pos is None:
                        start_pos = paragraph.text.find(text)
                        end_pos = start_pos + len(text)
                    elif end_pos is None:
                        end_pos = start_pos + len(text)
                    
                    # –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ runs —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    full_text = paragraph.text
                    for i in range(len(paragraph.runs)):
                        p = paragraph._p
                        p.remove(paragraph.runs[0]._r)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ —á–∞—Å—Ç–∏: –¥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è, –≤—ã–¥–µ–ª–µ–Ω–∏–µ, –ø–æ—Å–ª–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
                    if start_pos > 0:
                        paragraph.add_run(full_text[:start_pos])
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    formatted_run = paragraph.add_run(full_text[start_pos:end_pos])
                    if style == 'bold':
                        formatted_run.bold = True
                    elif style == 'italic':
                        formatted_run.italic = True
                    elif style == 'underline':
                        formatted_run.underline = WD_UNDERLINE.SINGLE
                    
                    # –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
                    if end_pos < len(full_text):
                        paragraph.add_run(full_text[end_pos:])
                    
                    found = True
            except IndexError:
                return {"success": False, "message": f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å ID {paragraph_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
            for paragraph in doc.paragraphs:
                if text in paragraph.text:
                    start_pos = paragraph.text.find(text)
                    end_pos = start_pos + len(text)
                    
                    # –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ runs —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    full_text = paragraph.text
                    for i in range(len(paragraph.runs)):
                        p = paragraph._p
                        p.remove(paragraph.runs[0]._r)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ —á–∞—Å—Ç–∏
                    if start_pos > 0:
                        paragraph.add_run(full_text[:start_pos])
                    
                    formatted_run = paragraph.add_run(full_text[start_pos:end_pos])
                    if style == 'bold':
                        formatted_run.bold = True
                    elif style == 'italic':
                        formatted_run.italic = True
                    elif style == 'underline':
                        formatted_run.underline = WD_UNDERLINE.SINGLE
                    
                    if end_pos < len(full_text):
                        paragraph.add_run(full_text[end_pos:])
                    
                    found = True
        
        if found:
            return {"success": True, "message": f"–¢–µ–∫—Å—Ç '{text[:50]}...' –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {style}"}
        else:
            return {"success": False, "message": f"–¢–µ–∫—Å—Ç '{text[:50]}...' –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        
    async def _add_paragraph(self, doc, text, after_paragraph_id=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤ –¥–æ–∫—É–º–µ–Ω—Ç"""
        if not text:
            return {"success": False, "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"}
        
        try:
            if after_paragraph_id is not None:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
                after_paragraph_id = int(after_paragraph_id)
                if after_paragraph_id < 0 or after_paragraph_id >= len(doc.paragraphs):
                    return {"success": False, "message": f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å ID {after_paragraph_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                
                # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç XML –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
                p = doc.paragraphs[after_paragraph_id]._p
                new_p = doc.add_paragraph(text)._p
                p.addnext(new_p)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –¥–æ–∫—É–º–µ–Ω—Ç–∞
                doc.add_paragraph(text)
            
            return {"success": True, "message": f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ: '{text[:30]}...'"}
        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {str(e)}"}

    async def _format_all_text(self, doc, style):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        if style not in ['bold', 'italic', 'underline']:
            return {"success": False, "message": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {style}"}
        
        count = 0
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        for paragraph in doc.paragraphs:
            if paragraph.text.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –ø—É—Å—Ç–æ–π
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É
                for run in paragraph.runs:
                    if style == 'bold':
                        run.bold = True
                    elif style == 'italic':
                        run.italic = True
                    elif style == 'underline':
                        run.underline = WD_UNDERLINE.SINGLE
                
                if not paragraph.runs:
                    run = paragraph.add_run(paragraph.text)
                    if style == 'bold':
                        run.bold = True
                    elif style == 'italic':
                        run.italic = True
                    elif style == 'underline':
                        run.underline = WD_UNDERLINE.SINGLE
                
                count += 1
        
        style_name_map = {
            'bold': '–∂–∏—Ä–Ω—ã–º',
            'italic': '–∫—É—Ä—Å–∏–≤–æ–º',
            'underline': '–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–º'
        }
        return {"success": True, "message": f"–í–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ —Å–¥–µ–ª–∞–Ω {style_name_map.get(style, style)} ({count} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤)"}

    async def _format_all_headings(self, doc, style):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        if style not in ['bold', 'italic', 'underline']:
            return {"success": False, "message": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {style}"}
        
        count = 0
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        for paragraph in doc.paragraphs:
            if paragraph.style.name.startswith('Heading'):
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É
                for run in paragraph.runs:
                    if style == 'bold':
                        run.bold = True
                    elif style == 'italic':
                        run.italic = True
                    elif style == 'underline':
                        run.underline = WD_UNDERLINE.SINGLE
                
                # –ï—Å–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –Ω–µ—Ç runs, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                if not paragraph.runs:
                    run = paragraph.add_run(paragraph.text)
                    if style == 'bold':
                        run.bold = True
                    elif style == 'italic':
                        run.italic = True
                    elif style == 'underline':
                        run.underline = WD_UNDERLINE.SINGLE
                
                count += 1
        
        style_name_map = {
            'bold': '–∂–∏—Ä–Ω—ã–º',
            'italic': '–∫—É—Ä—Å–∏–≤–æ–º',
            'underline': '–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–º'
        }
        return {"success": True, "message": f"–í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–¥–µ–ª–∞–Ω—ã {style_name_map.get(style, style)} ({count} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)"}

    async def _replace_all_text(self, doc, old_text, new_text):
        """–ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        if not old_text or not new_text:
            return {"success": False, "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"}
        
        count = 0
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        for paragraph in doc.paragraphs:
            if old_text in paragraph.text:
                # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ
                new_paragraph_text = paragraph.text.replace(old_text, new_text)
                
                # –û—á–∏—â–∞–µ–º –≤—Å–µ runs
                for i in range(len(paragraph.runs)):
                    p = paragraph._p
                    p.remove(paragraph.runs[0]._r)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π run —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                paragraph.add_run(new_paragraph_text)
                count += 1
        
        if count > 0:
            return {"success": True, "message": f"–¢–µ–∫—Å—Ç '{old_text}' –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ '{new_text}' {count} —Ä–∞–∑ –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É"}
        else:
            return {"success": False, "message": f"–¢–µ–∫—Å—Ç '{old_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"}    
    
    async def _delete_paragraph(self, doc, paragraph_id):
        """–£–¥–∞–ª—è–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            paragraph_id = int(paragraph_id)
            
            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –≤–∏–¥–∏–º—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
            visible_to_docx, docx_to_visible = await self._get_visible_paragraph_mapping(doc)
            
            print(f"–ú–∞–ø–ø–∏–Ω–≥ –≤–∏–¥–∏–º—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {visible_to_docx}")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ ID: {paragraph_id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –≤ DOCX
            actual_docx_id = None
            
            # –ï—Å–ª–∏ paragraph_id –º–µ–Ω—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–∏–º—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, 
            # –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –≤ –≤–∏–¥—É –≤–∏–¥–∏–º—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            if paragraph_id < len(visible_to_docx):
                actual_docx_id = visible_to_docx[paragraph_id]
                print(f"–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–∏–¥–∏–º—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_id} –≤ DOCX –ø–∞—Ä–∞–≥—Ä–∞—Ñ {actual_docx_id}")
            else:
                # –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ —É–∂–µ DOCX ID
                actual_docx_id = paragraph_id
                print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º DOCX ID –Ω–∞–ø—Ä—è–º—É—é: {actual_docx_id}")
            
            if actual_docx_id < 0 or actual_docx_id >= len(doc.paragraphs):
                return {"success": False, "message": f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å ID {paragraph_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—Å–µ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {len(doc.paragraphs)}"}
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            target_paragraph = doc.paragraphs[actual_docx_id]
            paragraph_text = target_paragraph.text[:30] if target_paragraph.text.strip() else "[–ü–£–°–¢–û–ô –ü–ê–†–ê–ì–†–ê–§]"
            
            print(f"–£–¥–∞–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ {actual_docx_id}: '{paragraph_text}'")
            
            # –£–¥–∞–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            p = target_paragraph._p
            p.getparent().remove(p)
            
            return {"success": True, "message": f"–£–¥–∞–ª–µ–Ω –ø–∞—Ä–∞–≥—Ä–∞—Ñ: '{paragraph_text}...'"}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {e}")
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {str(e)}"}

    async def _remove_formatting(self, doc, text, style, paragraph_id=None):
        """–°–Ω–∏–º–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω–æ–≥–æ)"""
        if not text:
            return {"success": False, "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç"}
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω—ã–π —Ç–µ–∫—Å—Ç
        async def remove_format_with_boundaries_callback(paragraph, start_pos, end_pos, is_partial):
            """–°–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–æ—á–Ω–æ–π —á–∞—Å—Ç–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö runs
            original_runs_data = []
            for run in paragraph.runs:
                original_runs_data.append({
                    'text': run.text,
                    'bold': run.bold,
                    'italic': run.italic,
                    'underline': run.underline
                })
            
            # –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            full_text = paragraph.text
            for i in range(len(paragraph.runs)):
                p = paragraph._p
                p.remove(paragraph.runs[0]._r)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            current_pos = 0
            
            for run_data in original_runs_data:
                run_text = run_data['text']
                run_start = current_pos
                run_end = current_pos + len(run_text)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                overlap_start = max(run_start, start_pos)
                overlap_end = min(run_end, end_pos)
                
                if overlap_start < overlap_end:
                    # –ï—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ - —Ä–∞–∑–¥–µ–ª—è–µ–º run
                    
                    # –ß–∞—Å—Ç—å –¥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                    if overlap_start > run_start:
                        before_run = paragraph.add_run(run_text[:overlap_start - run_start])
                        before_run.bold = run_data['bold']
                        before_run.italic = run_data['italic']
                        before_run.underline = run_data['underline']
                    
                    # –ü–µ—Ä–µ—Å–µ–∫–∞—é—â–∞—è—Å—è —á–∞—Å—Ç—å (—Å–Ω–∏–º–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
                    overlap_text = run_text[overlap_start - run_start:overlap_end - run_start]
                    unformatted_run = paragraph.add_run(overlap_text)
                    if style != 'bold':
                        unformatted_run.bold = run_data['bold']
                    if style != 'italic':
                        unformatted_run.italic = run_data['italic']
                    if style != 'underline':
                        unformatted_run.underline = run_data['underline']
                    
                    # –ß–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                    if overlap_end < run_end:
                        after_run = paragraph.add_run(run_text[overlap_end - run_start:])
                        after_run.bold = run_data['bold']
                        after_run.italic = run_data['italic']
                        after_run.underline = run_data['underline']
                else:
                    # –ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    restored_run = paragraph.add_run(run_text)
                    restored_run.bold = run_data['bold']
                    restored_run.italic = run_data['italic']
                    restored_run.underline = run_data['underline']
                
                current_pos = run_end
            
            return True

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω—ã–π —Ç–µ–∫—Å—Ç
        multi_result = await self._apply_operation_to_selected_text(
            doc, text, remove_format_with_boundaries_callback, "—Å–Ω—è—Ç–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        )
        
        if multi_result is not None:
            style_name_map = {
                'bold': '–∂–∏—Ä–Ω–æ—Å—Ç–∏',
                'italic': '–∫—É—Ä—Å–∏–≤–∞', 
                'underline': '–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è'
            }
            
            if style in style_name_map:
                return {"success": True, "message": f"–°–Ω—è—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {style_name_map[style]} —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"}
            else:
                return {"success": True, "message": f"–°–Ω—è—Ç–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"}

        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
        found = False
        actual_paragraph_id = None
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–µ–∫—Å—Ç –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
        print(f"üîç –ò—â–µ–º —Ç–µ–∫—Å—Ç '{text}' –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ...")
        for i, paragraph in enumerate(doc.paragraphs):
            if text in paragraph.text:
                found = True
                actual_paragraph_id = i
                print(f"‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ {i}")
                break
        
        if not found:
            return {"success": False, "message": f"–¢–µ–∫—Å—Ç '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"}
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω paragraph_id, –Ω–æ —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        if paragraph_id is not None and int(paragraph_id) != actual_paragraph_id:
            print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Frontend –ø–µ—Ä–µ–¥–∞–ª paragraph_id={paragraph_id}, –Ω–æ —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ {actual_paragraph_id}")
        
        # –†–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º
        try:
            paragraph = doc.paragraphs[actual_paragraph_id]
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ {actual_paragraph_id}")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –∏—Å–∫–æ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            start_pos = paragraph.text.find(text)
            end_pos = start_pos + len(text)
            
            print(f"–ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: {start_pos}-{end_pos}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ run
            original_runs_data = []
            for run in paragraph.runs:
                original_runs_data.append({
                    'text': run.text,
                    'bold': run.bold,
                    'italic': run.italic,
                    'underline': run.underline
                })
            
            # –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            full_text = paragraph.text
            for i in range(len(paragraph.runs)):
                p = paragraph._p
                p.remove(paragraph.runs[0]._r)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            current_pos = 0
            
            for run_data in original_runs_data:
                run_text = run_data['text']
                run_start = current_pos
                run_end = current_pos + len(run_text)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                overlap_start = max(run_start, start_pos)
                overlap_end = min(run_end, end_pos)
                
                if overlap_start < overlap_end:
                    # –ï—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ - –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å run
                    
                    # –ß–∞—Å—Ç—å –¥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
                    if overlap_start > run_start:
                        before_run = paragraph.add_run(run_text[:overlap_start - run_start])
                        before_run.bold = run_data['bold']
                        before_run.italic = run_data['italic']
                        before_run.underline = run_data['underline']
                    
                    # –ü–µ—Ä–µ—Å–µ–∫–∞—é—â–∞—è—Å—è —á–∞—Å—Ç—å (—Å–Ω–∏–º–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
                    overlap_text = run_text[overlap_start - run_start:overlap_end - run_start]
                    unformatted_run = paragraph.add_run(overlap_text)
                    unformatted_run.bold = False
                    unformatted_run.italic = False
                    unformatted_run.underline = False
                    
                    # –ß–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
                    if overlap_end < run_end:
                        after_run = paragraph.add_run(run_text[overlap_end - run_start:])
                        after_run.bold = run_data['bold']
                        after_run.italic = run_data['italic']
                        after_run.underline = run_data['underline']
                else:
                    # –ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º run –∫–∞–∫ –µ—Å—Ç—å
                    restored_run = paragraph.add_run(run_text)
                    restored_run.bold = run_data['bold']
                    restored_run.italic = run_data['italic']
                    restored_run.underline = run_data['underline']
                
                current_pos = run_end
            
            style_name_map = {
                'bold': '–∂–∏—Ä–Ω–æ—Å—Ç–∏',
                'italic': '–∫—É—Ä—Å–∏–≤–∞', 
                'underline': '–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è'
            }
            
            if style in style_name_map:
                return {"success": True, "message": f"–°–Ω—è—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {style_name_map[style]} —Å —Ç–µ–∫—Å—Ç–∞ '{text}' –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ {actual_paragraph_id}"}
            else:
                return {"success": True, "message": f"–°–Ω—è—Ç–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–∞ '{text}' –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ {actual_paragraph_id}"}
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {e}")
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}"}

    async def _remove_all_formatting(self, doc):
        """–°–Ω–∏–º–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            count = 0
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():  
                    for run in paragraph.runs:
                        run.bold = False
                        run.italic = False
                        run.underline = False
                    count += 1
            return {"success": True, "message": f"–°–Ω—è—Ç–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ ({count} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤)"}
        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞: {str(e)}"}


    # async def _remove_all_formatting_document(self, doc):
    #     """–°–Ω–∏–º–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    #     count = 0
        
    #     for paragraph in doc.paragraphs:
    #         if paragraph.text.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –ø—É—Å—Ç–æ–π
    #             # –°–Ω–∏–º–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ –≤—Å–µ—Ö runs
    #             for run in paragraph.runs:
    #                 run.bold = False
    #                 run.italic = False
    #                 run.underline = False
    #             count += 1
        
    #     return {"success": True, "message": f"–°–Ω—è—Ç–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ ({count} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤)"}
    


    async def _get_visible_paragraph_mapping(self, doc):
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –º–µ–∂–¥—É –≤–∏–¥–∏–º—ã–º–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏ –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –≤ DOCX"""
        visible_to_docx = {}
        docx_to_visible = {}
        visible_index = 0
        
        for docx_index, paragraph in enumerate(doc.paragraphs):
            if paragraph.text.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤–∏–¥–Ω—ã –≤ HTML
                visible_to_docx[visible_index] = docx_index
                docx_to_visible[docx_index] = visible_index
                visible_index += 1
        
        return visible_to_docx, docx_to_visible


    async def _convert_user_paragraph_number_to_docx(self, doc, user_paragraph_number):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–æ–º–µ—Ä –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∏–¥–∏–º—ã–π) –≤ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä DOCX"""
        visible_to_docx, _ = await self._get_visible_paragraph_mapping(doc)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç —Å 1, –∞ –º—ã —Å 0
        visible_index = user_paragraph_number - 1
        
        if visible_index in visible_to_docx:
            return visible_to_docx[visible_index]
        else:
            return None
        

    def _is_multi_paragraph_text(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω—ã–º"""
        return len(text) > 200 or '\n' in text or '"' in text or '*' in text
        #return '\n' in text or '"' in text or '*' in text

    def _extract_text_parts(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        normalized_text = ' '.join(text.split())
        text_parts = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º (—Å–ø–∏—Å–∫–∏, –∑–∞–≥–æ–ª–æ–≤–∫–∏)
        if '*' in normalized_text:
            parts = [part.strip() for part in normalized_text.split('*') if part.strip() and len(part.strip()) > 5]
            text_parts.extend(parts)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        for delimiter in ['.', ':', '###', '1.', '2.', '3.', '4.', '5.']:
            if delimiter in normalized_text:
                parts = [part.strip() for part in normalized_text.split(delimiter) if part.strip() and len(part.strip()) > 10]
                text_parts.extend(parts)
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–ª–∏–Ω–µ
        if not text_parts:
            words = normalized_text.split()
            current_part = ""
            for word in words:
                if len(current_part + " " + word) < 80:
                    current_part += " " + word if current_part else word
                else:
                    if current_part and len(current_part) > 10:
                        text_parts.append(current_part.strip())
                    current_part = word
            if current_part and len(current_part) > 10:
                text_parts.append(current_part.strip())
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ (–¥–ª–∏–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ —Å–Ω–∞—á–∞–ª–∞)
        text_parts = list(set(text_parts))
        text_parts.sort(key=len, reverse=True)
        
        return text_parts, normalized_text

    def _find_matching_paragraphs(self, doc, text_parts, operation_name="–æ–±—Ä–∞–±–æ—Ç–∫–∏"):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —á–∞—Å—Ç—è–º —Ç–µ–∫—Å—Ç–∞"""
        matched_paragraphs = []
        processed_paragraphs = set()
        
        print(f"üìù –†–∞–∑–±–∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ {len(text_parts)} —á–∞—Å—Ç–µ–π –¥–ª—è {operation_name}")
        for i, part in enumerate(text_parts[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —á–∞—Å—Ç–µ–π
            print(f"  {i+1}. '{part[:50]}...' (–¥–ª–∏–Ω–∞: {len(part)})")
        
        # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: –≤—ã—á–∏—Å–ª—è–µ–º "–≤–µ—Å" –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ (—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç)
        paragraph_scores = {}
        paragraph_matched_parts = {}
        
        for paragraph_idx, paragraph in enumerate(doc.paragraphs):
            paragraph_text = paragraph.text.strip()
            if not paragraph_text:
                continue
            
            normalized_paragraph = ' '.join(paragraph_text.split())
            matched_parts_for_paragraph = []
            score = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
            for part in text_parts:
                if len(part) < 10:  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    continue
                
                part_matched = False
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if part in normalized_paragraph:
                    matched_parts_for_paragraph.append({
                        'part': part,
                        'match_type': 'exact',
                        'score': len(part) / len(normalized_paragraph)
                    })
                    score += 2 * len(part)  # –ë–æ–ª—å—à–∏–π –≤–µ—Å –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    part_matched = True
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏ —Ñ—Ä–∞–∑–æ–≤–æ–µ
                if not part_matched:
                    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–æ–±—â–∏–µ —Å–ª–æ–≤–∞)
                    part_words = set(part.lower().split())
                    paragraph_words = set(normalized_paragraph.lower().split())
                    common_words = part_words.intersection(paragraph_words)
                    
                    word_ratio = len(common_words) / len(part_words) if part_words else 0
                    
                    if word_ratio >= 0.7 and len(part_words) >= 3:
                        matched_parts_for_paragraph.append({
                            'part': part,
                            'match_type': 'partial',
                            'score': word_ratio,
                            'common_words': len(common_words),
                            'total_words': len(part_words)
                        })
                        score += word_ratio * len(part)
                        part_matched = True
                    
                    # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã (3+ —Å–ª–æ–≤–∞ –ø–æ–¥—Ä—è–¥)
                    if not part_matched and len(part.split()) >= 3:
                        part_words_list = part.split()
                        for i in range(len(part_words_list) - 2):
                            phrase = ' '.join(part_words_list[i:i+3])
                            if phrase.lower() in normalized_paragraph.lower():
                                matched_parts_for_paragraph.append({
                                    'part': part,
                                    'match_type': 'phrase',
                                    'score': 3 / len(part_words_list),
                                    'phrase': phrase
                                })
                                score += 0.5 * len(phrase)
                                part_matched = True
                                break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if matched_parts_for_paragraph:
                paragraph_scores[paragraph_idx] = score
                paragraph_matched_parts[paragraph_idx] = matched_parts_for_paragraph
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –ø–æ –≤–µ—Å—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_paragraphs = sorted(
            paragraph_scores.items(), 
            key=lambda x: x[1], 
            reverse=True
        )
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É—á—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö
        print(f"üîç –ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã (–ø–æ –≤–µ—Å—É):")
        for idx, (p_idx, score) in enumerate(sorted_paragraphs[:6]):
            paragraph = doc.paragraphs[p_idx]
            print(f"  {idx+1}. –ü–∞—Ä–∞–≥—Ä–∞—Ñ {p_idx} (–≤–µ—Å: {score:.2f}): '{paragraph.text[:50]}...'")
            
            for match in paragraph_matched_parts[p_idx][:3]:  # Top 3 matches
                match_type = match['match_type']
                if match_type == 'exact':
                    print(f"     ‚úì –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{match['part'][:40]}...'")
                elif match_type == 'partial':
                    print(f"     ‚âà –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {match['common_words']}/{match['total_words']} —Å–ª–æ–≤")
                elif match_type == 'phrase':
                    print(f"     ~ –§—Ä–∞–∑–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{match['phrase']}'")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –≤—ã—Å–æ–∫–∏–º –≤–µ—Å–æ–º
        threshold = max(paragraph_scores.values()) * 0.3 if paragraph_scores else 0
        
        for p_idx, score in sorted_paragraphs:
            if p_idx in processed_paragraphs:
                continue
                
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –≤–µ—Å–æ–º –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
            if score >= threshold:
                paragraph = doc.paragraphs[p_idx]
                matched_parts = [m['part'] for m in paragraph_matched_parts[p_idx]]
                
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–∞—Ä–∞–≥—Ä–∞—Ñ {p_idx} (–≤–µ—Å: {score:.2f}): '{paragraph.text[:50]}...'")
                
                matched_paragraphs.append({
                    'index': p_idx,
                    'paragraph': paragraph,
                    'matched_parts': matched_parts,
                    'score': score
                })
                processed_paragraphs.add(p_idx)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if not matched_paragraphs:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —á–∞—Å—Ç—è–º —Ç–µ–∫—Å—Ç–∞")
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –ø–æ –∏—Ö –∏–Ω–¥–µ–∫—Å—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        matched_paragraphs.sort(key=lambda x: x['index'])
        
        return matched_paragraphs


    def _fallback_search_by_keywords(self, doc, normalized_text, operation_name="–æ–±—Ä–∞–±–æ—Ç–∫–∏"):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        matched_paragraphs = []
        unique_words = [word for word in normalized_text.split() if len(word) > 4 and not word.isdigit()][:10]
        print(f"üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è {operation_name} –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {unique_words[:5]}...")
        
        for paragraph_idx, paragraph in enumerate(doc.paragraphs):
            paragraph_text = paragraph.text.strip()
            if not paragraph_text:
                continue
            
            paragraph_words = paragraph_text.lower().split()
            matches = sum(1 for word in unique_words if word.lower() in paragraph_words)
            
            if matches >= 2:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ 2+ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
                print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ {paragraph_idx}: {matches} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
                matched_paragraphs.append({
                    'index': paragraph_idx,
                    'paragraph': paragraph,
                    'matched_parts': [f"keywords: {matches} matches"]
                })
        
        return matched_paragraphs

    async def _process_multi_paragraph_text(self, doc, text, operation_callback, operation_name="–æ–±—Ä–∞–±–æ—Ç–∫–∏"):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if not self._is_multi_paragraph_text(text):
            return None  # –ù–µ –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω—ã–π —Ç–µ–∫—Å—Ç
        
        print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è {operation_name}, –¥–ª–∏–Ω–∞: {len(text)}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        text_parts, normalized_text = self._extract_text_parts(text)
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        matched_paragraphs = self._find_matching_paragraphs(doc, text_parts, operation_name)
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        if not matched_paragraphs:
            print("‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            matched_paragraphs = self._fallback_search_by_keywords(doc, normalized_text, operation_name)
        
        if not matched_paragraphs:
            return {"success": False, "message": f"–ú–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        processed_count = 0
        for match in matched_paragraphs:
            paragraph_idx = match['index']
            paragraph = match['paragraph']
            matched_parts = match['matched_parts']
            
            print(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph_idx}: '{paragraph.text[:50]}...'")
            print(f"   –°–æ–≤–ø–∞–≤—à–∏–µ —á–∞—Å—Ç–∏: {[str(p)[:30] + '...' if len(str(p)) > 30 else str(p) for p in matched_parts]}")
            
            # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
            if await operation_callback(paragraph):
                processed_count += 1
        
        return {
            "success": True, 
            "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ ({operation_name})",
            "processed_count": processed_count
        }
    

    def _find_text_boundaries_in_paragraphs(self, doc, selected_text, matched_paragraphs):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö"""
        text_boundaries = []
        remaining_text = selected_text.strip()
        
        print(f"üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{selected_text[:100]}...'")
        
        for idx, match in enumerate(matched_paragraphs):
            paragraph = match['paragraph']
            paragraph_text = paragraph.text
            
            boundary_info = {
                'paragraph_index': match['index'],
                'paragraph': paragraph,
                'start_pos': 0,
                'end_pos': len(paragraph_text),
                'is_partial': False
            }
            
            # –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ - –∏—â–µ–º –Ω–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            if idx == 0 and len(matched_paragraphs) > 1:
                # –ò—â–µ–º –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–≤–æ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ
                start_words = selected_text.split()[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤
                start_phrase = ' '.join(start_words)
                
                start_pos = paragraph_text.find(start_phrase)
                if start_pos >= 0:
                    boundary_info['start_pos'] = start_pos
                    boundary_info['is_partial'] = True
                    print(f"üìç –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ: –Ω–∞—á–∞–ª–æ —Å –ø–æ–∑–∏—Ü–∏–∏ {start_pos}")
                else:
                    # –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
                    for word in start_words:
                        if word in paragraph_text:
                            start_pos = paragraph_text.find(word)
                            boundary_info['start_pos'] = start_pos
                            boundary_info['is_partial'] = True
                            print(f"üìç –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ: –Ω–∞—á–∞–ª–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–ª–æ–≤—É '{word}' –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {start_pos}")
                            break
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ - –∏—â–µ–º –∫–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è
            elif idx == len(matched_paragraphs) - 1 and len(matched_paragraphs) > 1:
                # –ò—â–µ–º –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                end_words = selected_text.split()[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–ª–æ–≤
                end_phrase = ' '.join(end_words)
                
                # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                clean_end_phrase = end_phrase.rstrip('.,!?;: ')
                
                end_pos = paragraph_text.find(clean_end_phrase)
                if end_pos >= 0:
                    boundary_info['end_pos'] = end_pos + len(clean_end_phrase)
                    boundary_info['is_partial'] = True
                    print(f"üìç –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ: –∫–æ–Ω–µ—Ü –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {boundary_info['end_pos']}")
                else:
                    # –ü–æ–∏—Å–∫ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–ª–æ–≤–∞–º
                    for word in reversed(end_words):
                        word_pos = paragraph_text.find(word)
                        if word_pos >= 0:
                            boundary_info['end_pos'] = word_pos + len(word)
                            boundary_info['is_partial'] = True
                            print(f"üìç –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ: –∫–æ–Ω–µ—Ü –Ω–∞–π–¥–µ–Ω –ø–æ —Å–ª–æ–≤—É '{word}' –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {boundary_info['end_pos']}")
                            break
            
            # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ - –∏—â–µ–º —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
            elif len(matched_paragraphs) == 1:
                # –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                clean_selected = ' '.join(selected_text.split())
                clean_paragraph = ' '.join(paragraph_text.split())
                
                start_pos = clean_paragraph.find(clean_selected)
                if start_pos >= 0:
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                    original_start = self._find_original_position(paragraph_text, start_pos, clean_paragraph)
                    original_end = original_start + len(selected_text)
                    
                    boundary_info['start_pos'] = original_start
                    boundary_info['end_pos'] = min(original_end, len(paragraph_text))
                    boundary_info['is_partial'] = True
                    print(f"üìç –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ: –ø–æ–∑–∏—Ü–∏–∏ {original_start}-{boundary_info['end_pos']}")
            
            text_boundaries.append(boundary_info)
        
        return text_boundaries

    def _find_original_position(self, original_text, normalized_pos, normalized_text):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–∑–∏—Ü–∏—é –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º"""
        if normalized_pos == 0:
            return 0
        
        original_words = original_text.split()
        normalized_words = normalized_text.split()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        char_count = 0
        word_count = 0
        
        for char in normalized_text[:normalized_pos]:
            if char == ' ':
                word_count += 1
            char_count += 1
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        original_pos = 0
        current_word = 0
        
        for i, char in enumerate(original_text):
            if char == ' ' or char == '\t' or char == '\n':
                if current_word < word_count:
                    current_word += 1
                original_pos = i
            elif current_word >= word_count:
                return original_pos
            
            if current_word >= word_count:
                return i
        
        return min(original_pos, len(original_text))
    

    async def _apply_operation_to_selected_text(self, doc, selected_text, operation_callback, operation_name="–æ–±—Ä–∞–±–æ—Ç–∫–∏"):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∫ —Ç–æ—á–Ω–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –º–Ω–æ–≥–æ–ø–∞—Ä–∞–≥—Ä–∞—Ñ–Ω—ã–º
        if not self._is_multi_paragraph_text(selected_text):
            return None  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        
        print(f"üéØ –ü—Ä–∏–º–µ–Ω—è–µ–º {operation_name} –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –¥–ª–∏–Ω–æ–π {len(selected_text)}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        text_parts, normalized_text = self._extract_text_parts(selected_text)
        matched_paragraphs = self._find_matching_paragraphs(doc, text_parts, operation_name)
        
        if not matched_paragraphs:
            matched_paragraphs = self._fallback_search_by_keywords(doc, normalized_text, operation_name)
        
        if not matched_paragraphs:
            return {"success": False, "message": f"–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ
        text_boundaries = self._find_text_boundaries_in_paragraphs(doc, selected_text, matched_paragraphs)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É —Å —É—á–µ—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü
        processed_count = 0
        for boundary in text_boundaries:
            paragraph = boundary['paragraph']
            start_pos = boundary['start_pos']
            end_pos = boundary['end_pos']
            is_partial = boundary['is_partial']
            
            print(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ {boundary['paragraph_index']}: –ø–æ–∑–∏—Ü–∏–∏ {start_pos}-{end_pos}")
            print(f"   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç: '{paragraph.text[start_pos:end_pos]}'")
            
            # –í—ã–∑—ã–≤–∞–µ–º callback —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö
            if await operation_callback(paragraph, start_pos, end_pos, is_partial):
                processed_count += 1
        
        return {
            "success": True,
            "message": f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {operation_name} –¥–ª—è {processed_count} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤",
            "processed_count": processed_count
        }

